// <auto-generated />
using System;
using CreditContolTrackerAPIs.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CreditContolTrackerAPIs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230512130336_added2columns")]
    partial class added2columns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountTypeId"));

                    b.Property<string>("AccountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Aging", b =>
                {
                    b.Property<int>("AgingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgingId"));

                    b.Property<string>("AgingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgingId");

                    b.ToTable("Agings");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.CompanyCategory", b =>
                {
                    b.Property<int>("CompanyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyCategoryId"));

                    b.Property<string>("CompanyCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyCategoryId");

                    b.ToTable("CompanyCategories");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceDetail", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AgingId")
                        .HasColumnType("int");

                    b.Property<string>("ArPoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BalanceInCurrency")
                        .HasColumnType("bigint");

                    b.Property<long?>("BalanceInUsd")
                        .HasColumnType("bigint");

                    b.Property<string>("BrnFacTuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContractPartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreditNoteDiscounts")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreditUsdamount")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryHead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryPartner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("FusionAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FusionAccountNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("NewBu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewDu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewOu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTerm")
                        .HasColumnType("int");

                    b.Property<string>("PoNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectContractId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provisioning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesPocasperIms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesVp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedSalesPoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedSalesVp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Usdbalance")
                        .HasColumnType("bigint");

                    b.HasKey("InvoiceNo");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("AgingId");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EntityId");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("InvoiceTypeId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("InvoiceStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceStatusId"));

                    b.Property<string>("InvoiceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceStatusId");

                    b.ToTable("InvoiceStatuses");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceTypeId"));

                    b.Property<string>("InvoiceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceTypeId");

                    b.ToTable("InvoiceTypes");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiptId"));

                    b.Property<long?>("AmountInUsd")
                        .HasColumnType("bigint");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckWire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Column8")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("RecOrigCurrAmount")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceivedIn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReceiptId");

                    b.HasIndex("InvoiceNo");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceDetail", b =>
                {
                    b.HasOne("CreditControlTrackerAPIs.Models.AccountType", "AccountType")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.Aging", "Aging")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("AgingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.CompanyCategory", "CompanyCategory")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("CompanyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.Customer", "customer")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.Entity", "Entity")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreditControlTrackerAPIs.Models.InvoiceType", "InvoiceType")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Aging");

                    b.Navigation("CompanyCategory");

                    b.Navigation("Entity");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("InvoiceType");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Receipt", b =>
                {
                    b.HasOne("CreditControlTrackerAPIs.Models.InvoiceDetail", "InvoiceDetail")
                        .WithMany("invoiceDetail")
                        .HasForeignKey("InvoiceNo");

                    b.Navigation("InvoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.AccountType", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Aging", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.CompanyCategory", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Customer", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.Entity", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceDetail", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceStatus", b =>
                {
                    b.Navigation("invoiceDetail");
                });

            modelBuilder.Entity("CreditControlTrackerAPIs.Models.InvoiceType", b =>
                {
                    b.Navigation("invoiceDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
